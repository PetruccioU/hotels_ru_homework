"use strict"
// –ó–∞–¥–∞—á–∞ 1:
// –ù–∞–ø–∏—Å–∞—Ç—å –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã.

// 1.1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –Ω–æ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –±–æ–ª—å—à–∞—è. "Abscd"

// 1.2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–ª—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤.
// "–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏,–≤ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.–ü–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –ø—Ä–æ–±–µ–ª—ã , –∞ –ø–µ—Ä–µ–¥
// –∑–Ω–∞–∫–∞–º–∏ –∏—Ö –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ .  –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –ø—Ä–æ–±–µ–ª—ã, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã." =>
// "–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. –ü–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –ø—Ä–æ–±–µ–ª—ã, –∞ –ø–µ—Ä–µ–¥
// –∑–Ω–∞–∫–∞–º–∏ –∏—Ö –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ. –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –ø—Ä–æ–±–µ–ª—ã, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã."

// 1.3. –ü–æ–¥c—á–∏—Ç—ã–≤–∞—é—â–∏–µ –∫–æ–ª-–≤–æ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.

// 1.4. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—é—â–∏–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞. "–¢–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–ª–æ–≤–æ —Ç–µ–∫—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è
// –∏ —Å–ª–æ–≤–æ —Ç–æ–∂–µ" - –≤ –æ—Ç–≤–µ—Ç–µ, —á—Ç–æ "—Å–ª–æ–≤–æ - 2 —Ä–∞–∑–∞, —Ç–µ–∫—Å—Ç - 2 —Ä–∞–∑–∞, –≤ - 1 —Ä–∞–∑, –Ω–µ—Å–∫–æ–ª—å–∫–æ - 1 —Ä–∞–∑".
// –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–∞—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞.


// üìÅ task_1_alert.js

// 1.1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –Ω–æ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –±–æ–ª—å—à–∞—è. "Abscd"
export function strToLoFirstToHi(st)
{
    let correct = st.toLowerCase();
    correct = correct[0].toUpperCase()+correct.slice(1);
    alert(`–ò–º–µ–µ–º —Å—Ç—Ä–æ–∫—É:
"${st}".
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –Ω–æ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –±–æ–ª—å—à–∞—è:
"${correct}'`)
}

// 1.2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–ª—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤.
// "–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏,–≤ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.–ü–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –ø—Ä–æ–±–µ–ª—ã , –∞ –ø–µ—Ä–µ–¥
// –∑–Ω–∞–∫–∞–º–∏ –∏—Ö –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ .  –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –ø—Ä–æ–±–µ–ª—ã,   –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã." =>
// "–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. –ü–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –ø—Ä–æ–±–µ–ª—ã, –∞ –ø–µ—Ä–µ–¥
// –∑–Ω–∞–∫–∞–º–∏ –∏—Ö –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ. –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –ø—Ä–æ–±–µ–ª—ã, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã."
export function correctPunctuation(my_text)
{
    let arr_res = my_text.split(',');
    let arr_first_res=[]
    for (let word of arr_res)
    {
        word = arr_first_res.push(' '+word.trim());
    }
    let str_new = arr_first_res.join(',');
    let arr_second_res=[]
    let arr_new = str_new.split('.');
    for (let words of arr_new)
    {
        words = arr_second_res.push(' '+words.trim());
    }
    let res = arr_second_res.join('.')
    alert(`–ò—Å–ø—Ä–∞–≤–∏–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–µ:
"${my_text}". 
–ü–æ–ª—É—á–∞–µ–º: 
"${res.trim()}"`);
}

// 1.3. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—é—â–∏–π –∫–æ–ª-–≤–æ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.
export function strWordsCount(st)
{
    let arr_words = st.split(' ')
    alert(`–ü–æ–¥—Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ: 
"${st}". 
–û—Ç–≤–µ—Ç: ${arr_words.length} —Å–ª–æ–≤!`)
}

// 1.4. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—é—â–∏–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞. "–¢–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–ª–æ–≤–æ —Ç–µ–∫—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ. —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è
// –∏ —Å–ª–æ–≤–æ —Ç–æ–∂–µ" - –≤ –æ—Ç–≤–µ—Ç–µ, —á—Ç–æ "—Å–ª–æ–≤–æ - 2 —Ä–∞–∑–∞, —Ç–µ–∫—Å—Ç - 2 —Ä–∞–∑–∞, –≤ - 1 —Ä–∞–∑, –Ω–µ—Å–∫–æ–ª—å–∫–æ - 1 —Ä–∞–∑". (/\|.|,|!|\?|'|"|`|/)
// –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–∞—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞. /,\s*/)
export function strUniqueWordsCount(my_text)
{
    let text_low = my_text.toLowerCase();
    let str_to = text_low.replace( /,|\.|!|\?|'|"|`/g, "" )
    let str_count = str_to.replace( /-/g, " " )
    let arr_to_count = str_count.split(' ');
    alert(arr_to_count)
    let wordsCount = arr_to_count.reduce(function (counter, words) {
        if(counter[words]) {
            counter[words] += 1
        } else {
            counter[words] = 1;
        }
        return counter;
    }, {});
    alert(`–°–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ "${my_text}": `
        +JSON.stringify(wordsCount))
}

